name: Build/Test-Services/Scan/Push Docker Images

on:
  push:
    branches:
      - dev

env:
  DNSM: abrantedevops/network_services_structure:veridis-bind-master
  DNSL: abrantedevops/network_services_structure:veridis-bind-slave
  NGINXL: abrantedevops/network_services_structure:veridis-nginx-lan
  NGINXW: abrantedevops/network_services_structure:veridis-nginx-wan
  APACHE: abrantedevops/network_services_structure:statusquo-apache
  
  path_master: ./isolated_environment/imagem_for_dockerhub_veridis/bind9
  path_slave: ./isolated_environment/imagem_for_dockerhub_veridis/bind9/slave
  path_nginx_lan: ./isolated_environment/imagem_for_dockerhub_veridis/nginx/lan
  path_nginx_wan: ./isolated_environment/imagem_for_dockerhub_veridis/nginx/wan
  path_apache: ./isolated_environment/imagem_for_dockerhub_statusquo/apache



jobs:
    Build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Build Docker images
              run: |
                docker build -t ${{ env.DNSM }} ${{ env.path_master }}
                docker build -t ${{ env.DNSL }} ${{ env.path_slave }}
                docker build -t ${{ env.NGINXL }} ${{ env.path_nginx_lan }}
                docker build -t ${{ env.NGINXW }} ${{ env.path_nginx_wan }}
                docker build -t ${{ env.APACHE }} ${{ env.path_apache }}

            - name: Artifacts for docker images
              uses: actions/upload-artifact@v2
              with:
                name: docker-images
                path: |
                  ${{ env.path_master }}
                  ${{ env.path_slave }}
                  ${{ env.path_nginx_lan }}
                  ${{ env.path_nginx_wan }}
                  ${{ env.path_apache }}
               
    Test-Services:
        needs: Build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Docker Run For Test
              run: |
                docker network create --subnet=192.168.10.0/24 --gateway=192.168.10.1 redelan
                docker network create --subnet=203.0.113.0/24 --gateway=203.0.113.1 redewan
                docker run -d --name veridis-bindm --network redelan --ip 192.168.10.3 ${{ env.DNSM }}
                docker network connect --ip 203.0.113.3 redewan veridis-bindm
                docker run -d --name veridis-binds --network redewan --ip 203.0.113.5 ${{ env.DNSL }}
                docker network connect --ip 192.168.10.5 redelan veridis-binds
                docker run -d --name nginx-lan --network redelan --ip 192.168.10.2 -p 80:80 ${{ env.NGINXL }}
                docker run -d --name nginx-wan --network redewan --ip 203.0.113.2 -p 443:443 ${{ env.NGINXW }}
                docker run -d --name statusquo-apache -p 8000:8000 ${{ env.APACHE }}
                
            - name: Setup Python Version
              uses: actions/setup-python@v2
              with:
                python-version: 3.8

            - name: Execute Python Script - Veridis
              run: python ./test/tveridis.py

            - name: Execute Python Script - Statusquo
              run: python ./test/tstatusquo.py

    Vulnerabilities:
        needs: Test-Services
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Install Trivy
              run: |
                wget https://github.com/aquasecurity/trivy/releases/download/v0.42.1/trivy_0.42.1_Linux-64bit.deb
                sudo dpkg -i trivy_0.42.1_Linux-64bit.deb

            - name: Scan Docker images
              run: |
                trivy image ${{ env.DNSM }}
                trivy image ${{ env.DNSL }}
                trivy image ${{ env.NGINXL }}
                trivy image ${{ env.NGINXW }}
                trivy image ${{ env.APACHE }}
              
    Registry:
        needs: Vulnerabilities
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
        
            - name: Login to DockerHub
              uses: docker/login-action@v2.2.0
              with:
                username: ${{ secrets.USER }}
                password: ${{ secrets.PASS }}
        
            

            - name: Push Docker images
              run: |
                docker push abrantedevops/${{ env.DNSM }}
                docker push abrantedevops/${{ env.DNSL }}
                docker push abrantedevops/${{ env.NGINXL }}
                docker push abrantedevops/${{ env.NGINXW }}
                docker push abrantedevops/${{ env.APACHE }}


        
                
                