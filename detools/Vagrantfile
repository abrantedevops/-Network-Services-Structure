# -*- mode: ruby -*-
# vi: set ft=ruby :

#Parte 1 - Vagrant

Vagrant.configure("2") do |config|
  config.vm.provision "shell", inline: <<-SHELL
      echo "IMPORTANTE! Verifique se o arquivo hosts está conforme a documentação do tutorial no GitHub."  
  SHELL

  # Configuração da VM1 (Veridis)
  config.vm.define "veridis" do |veridis|
    veridis.vm.box = "debian/bullseye64"
    veridis.vm.network "private_network", virtualbox__intnet: "intnet", auto_config: false #interface private for lan
    veridis.vm.network "private_network", virtualbox__intnet: "intnet", auto_config: false #interface private for wan
    veridis.vm.hostname = "Server-Veridis"
    veridis.vm.provider "virtualbox" do |vb|
      vb.memory = "1024"
      vb.name = "Server-Veridis"
      vb.gui = false
      vb.customize ['createhd', '--filename', 'diskz1z.vdi', '--size', '10240']
      vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', 'diskz1z.vdi']
      vb.customize ['createhd', '--filename', 'diskz2z.vdi', '--size', '10240']
      vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', 'diskz2z.vdi']
      vb.customize ['createhd', '--filename', 'diskz3z.vdi', '--size', '10240']
      vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 3, '--device', 0, '--type', 'hdd', '--medium', 'diskz3z.vdi']
      
     

    end
   

    #host-only network LAN (comunication between VM and host)
    veridis.vm.network "private_network", ip: "192.168.57.7"

    # Configuração de encaminhamento de porta
    veridis.vm.network "forwarded_port", guest: 53, host: 5353, protocol: "tcp"
    veridis.vm.network "forwarded_port", guest: 53, host: 5353, protocol: "udp"

    # Configuração de provisionamento do Veridis com Ansible
    veridis.vm.provision "ansible" do |ansible|
      ansible.playbook = "playbook_veridis.yml"
    end
  end



  # Configuração da VM2 (Statusquo)
  config.vm.define "statusquo" do |statusquo|
    statusquo.vm.box = "debian/bullseye64"
    statusquo.vm.network "private_network", virtualbox__intnet: "intnet", auto_config: false
    statusquo.vm.network "private_network", virtualbox__intnet: "intnet", auto_config: false
    statusquo.vm.hostname = "Server-Statusquo"
    statusquo.vm.provider "virtualbox" do |vb|
      vb.memory = "512"
      vb.name = "Server-Statusquo"
      vb.gui = false
      vb.cpus = 1
    end

    # Configuração de provisionamento com Ansible
    statusquo.vm.provision "ansible" do |ansible|
      ansible.playbook = "playbook_statusquo.yml"
    end
  end


  # Configuração da VM3 (Client)
  config.vm.define "client" do |client|
    client.vm.box = "debian/bullseye64"
    client.vm.network "private_network", virtualbox__intnet: "intnet", auto_config: false #interface for lan
    client.vm.network "private_network", virtualbox__intnet: "intnet", auto_config: false #interface for wan
    client.vm.hostname = "Client-Host"
    client.vm.provider "virtualbox" do |vb|
      vb.memory = "512"
      vb.name = "Client-Host"
      vb.gui = false
      vb.cpus = 1
    end

    # Configuração de provisionamento com Ansible
    client.vm.provision "ansible" do |ansible|
      ansible.playbook = "playbook_client.yml"
    end
  end

end