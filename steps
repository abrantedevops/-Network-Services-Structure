
Esqueleto:
Configurar o Vagranftile para subir dois servidores e um cliente para testes. 
Nisso, o vagrant no servidor 1 (veridis) vai subir 3 discos rígidos, para que assim o Ansible faça toda a configuração de gerenciamento de disco, configurações de acesso remoto, criação de usuarios e a segurança de acesso ao sistema. 
Veridis: Em seguida, o playbook do veridis vai chamar um dockerfile contendo uma imagem do bind9 (que esta no dockerhub) que foi modificada do padrão. Essa imagem do bind9 foi modificada com todas as configurações necessárias para se tornar um container que está funcionando no servidor veridis, sendo esta aplicação isolada para ser o serviço de DNS. Em seguida, também será levantado uma imagem do nginx que foi modificada para servidr como balanceador de carga e proxy ao servidor Veridis
Statusquo: Servidor que hospedará todo o conteudo web do laboratório. Assim, no arquivo do vagrantfile vai instanciar uma VM2, o playbook vai realizar a configuração dos requisitos básicos do sistema, em seguida um dockerfile associado irá levantar um container com a imagem do apache, ou seja, essa imagem do apache foi modificada com as configuraçẽos internas da aplicação e hospedada no repositório do dockerhub.
Cliente: Vm responsável por validar todo o laboratório.


Vagrant:
Para iniciar a parte 1: vagrant up
destruir todas as máquinas criadas: vagrant destroy -f
aguarar o ansible provisioar as vms e as suas configurações externa 

Para acessar o cliente: vagrant ssh cliente
Para acessar servidor: vagrant ssh veridis

Ansible(Playbook): É chamado pelo Vagrant. Responsável por provisionar todas as configurações internas das VM's.


Docker:

Descobrir o ip do container: sudo docker inspect vagrant_database_1 | grep IP
Parando e removendo os container:
docker ps (mostra os container que estão operando)
docker rm $(docker container ps -aq) --force
docker container ps -aq (puxa so os ids do container)
Logo, pra remover todos, inclusive que estão executando:
docker rm $(docker container ps -aq) --force (o force é pra ele apagar inclusive todos que estão executando)


ImagemDocker:
